{"version":3,"file":"exports.js","sources":["../../../src/logs/exports.ts"],"sourcesContent":["import type { Client } from '../client';\nimport { _getTraceInfoFromScope } from '../client';\nimport { getClient, getCurrentScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { SEVERITY_TEXT_TO_SEVERITY_NUMBER } from './constants';\nimport type { SerializedLogAttribute, SerializedOtelLog } from '../types-hoist';\nimport type { Log } from '../types-hoist/log';\nimport { isParameterizedString, logger } from '../utils-hoist';\nimport { _getSpanForScope } from '../utils/spanOnScope';\nimport { createOtelLogEnvelope } from './envelope';\n\nconst MAX_LOG_BUFFER_SIZE = 100;\n\nconst CLIENT_TO_LOG_BUFFER_MAP = new WeakMap<Client, Array<SerializedOtelLog>>();\n\n/**\n * Converts a log attribute to a serialized log attribute.\n *\n * @param key - The key of the log attribute.\n * @param value - The value of the log attribute.\n * @returns The serialized log attribute.\n */\nexport function logAttributeToSerializedLogAttribute(key: string, value: unknown): SerializedLogAttribute {\n  switch (typeof value) {\n    case 'number':\n      return {\n        key,\n        value: { doubleValue: value },\n      };\n    case 'boolean':\n      return {\n        key,\n        value: { boolValue: value },\n      };\n    case 'string':\n      return {\n        key,\n        value: { stringValue: value },\n      };\n    default: {\n      let stringValue = '';\n      try {\n        stringValue = JSON.stringify(value) ?? '';\n      } catch {\n        // Do nothing\n      }\n      return {\n        key,\n        value: { stringValue },\n      };\n    }\n  }\n}\n\n/**\n * Captures a log event and sends it to Sentry.\n *\n * @param log - The log event to capture.\n * @param scope - A scope. Uses the current scope if not provided.\n * @param client - A client. Uses the current client if not provided.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_captureLog(\n  beforeLog: Log,\n  client: Client | undefined = getClient(),\n  scope = getCurrentScope(),\n): void {\n  if (!client) {\n    DEBUG_BUILD && logger.warn('No client available to capture log.');\n    return;\n  }\n\n  const { _experiments, release, environment } = client.getOptions();\n  const { enableLogs = false, beforeSendLog } = _experiments ?? {};\n  if (!enableLogs) {\n    DEBUG_BUILD && logger.warn('logging option not enabled, log will not be captured.');\n    return;\n  }\n\n  client.emit('beforeCaptureLog', beforeLog);\n\n  const log = beforeSendLog ? beforeSendLog(beforeLog) : beforeLog;\n  if (!log) {\n    client.recordDroppedEvent('before_send', 'log_item', 1);\n    DEBUG_BUILD && logger.warn('beforeSendLog returned null, log will not be captured.');\n    return;\n  }\n\n  const [, traceContext] = _getTraceInfoFromScope(client, scope);\n\n  const { level, message, attributes, severityNumber } = log;\n\n  const logAttributes = {\n    ...attributes,\n  };\n\n  if (release) {\n    logAttributes['sentry.release'] = release;\n  }\n\n  if (environment) {\n    logAttributes['sentry.environment'] = environment;\n  }\n\n  const { sdk } = client.getSdkMetadata() ?? {};\n  if (sdk) {\n    logAttributes['sentry.sdk.name'] = sdk.name;\n    logAttributes['sentry.sdk.version'] = sdk.version;\n  }\n\n  if (isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ = [] } = message;\n    logAttributes['sentry.message.template'] = __sentry_template_string__;\n    __sentry_template_values__.forEach((param, index) => {\n      logAttributes[`sentry.message.parameter.${index}`] = param;\n    });\n  }\n\n  const span = _getSpanForScope(scope);\n  if (span) {\n    // Add the parent span ID to the log attributes for trace context\n    logAttributes['sentry.trace.parent_span_id'] = span.spanContext().spanId;\n  }\n\n  const serializedLog: SerializedOtelLog = {\n    severityText: level,\n    body: {\n      stringValue: message,\n    },\n    attributes: Object.entries(logAttributes).map(([key, value]) => logAttributeToSerializedLogAttribute(key, value)),\n    timeUnixNano: `${new Date().getTime().toString()}000000`,\n    traceId: traceContext?.trace_id,\n    severityNumber: severityNumber ?? SEVERITY_TEXT_TO_SEVERITY_NUMBER[level],\n  };\n\n  const logBuffer = CLIENT_TO_LOG_BUFFER_MAP.get(client);\n  if (logBuffer === undefined) {\n    CLIENT_TO_LOG_BUFFER_MAP.set(client, [serializedLog]);\n  } else {\n    logBuffer.push(serializedLog);\n    if (logBuffer.length > MAX_LOG_BUFFER_SIZE) {\n      _INTERNAL_flushLogsBuffer(client, logBuffer);\n    }\n  }\n\n  client.emit('afterCaptureLog', log);\n}\n\n/**\n * Flushes the logs buffer to Sentry.\n *\n * @param client - A client.\n * @param maybeLogBuffer - A log buffer. Uses the log buffer for the given client if not provided.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_flushLogsBuffer(client: Client, maybeLogBuffer?: Array<SerializedOtelLog>): void {\n  const logBuffer = maybeLogBuffer ?? CLIENT_TO_LOG_BUFFER_MAP.get(client) ?? [];\n  if (logBuffer.length === 0) {\n    return;\n  }\n\n  const clientOptions = client.getOptions();\n  const envelope = createOtelLogEnvelope(logBuffer, clientOptions._metadata, clientOptions.tunnel, client.getDsn());\n\n  // Clear the log buffer after envelopes have been constructed.\n  logBuffer.length = 0;\n\n  client.emit('flushLogs');\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n\n/**\n * Returns the log buffer for a given client.\n *\n * Exported for testing purposes.\n *\n * @param client - The client to get the log buffer for.\n * @returns The log buffer for the given client.\n */\nexport function _INTERNAL_getLogBuffer(client: Client): Array<SerializedOtelLog> | undefined {\n  return CLIENT_TO_LOG_BUFFER_MAP.get(client);\n}\n"],"names":["client","getClient","getCurrentScope","DEBUG_BUILD","logger","_getTraceInfoFromScope","isParameterizedString","_getSpanForScope","SEVERITY_TEXT_TO_SEVERITY_NUMBER","envelope","createOtelLogEnvelope"],"mappings":"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"}