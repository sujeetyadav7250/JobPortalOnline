"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_7EKMLEZ6_exports = {};
__export(chunk_7EKMLEZ6_exports, {
  PrismaInstrumentation: () => PrismaInstrumentation
});
module.exports = __toCommonJS(chunk_7EKMLEZ6_exports);
var import_chunk_J2R3KSH3 = require("./chunk-J2R3KSH3.js");
var import_chunk_JORHPTV5 = require("./chunk-JORHPTV5.js");
var import_chunk_TPXO4NMU = require("./chunk-TPXO4NMU.js");
var import_api = require("@opentelemetry/api");
var import_instrumentation = require("@opentelemetry/instrumentation");
var PrismaInstrumentation = class extends import_instrumentation.InstrumentationBase {
  constructor(config = {}) {
    super(import_chunk_JORHPTV5.NAME, import_chunk_JORHPTV5.VERSION, config);
    (0, import_chunk_TPXO4NMU.__publicField)(this, "tracerProvider");
  }
  setTracerProvider(tracerProvider) {
    this.tracerProvider = tracerProvider;
  }
  init() {
    const module2 = new import_instrumentation.InstrumentationNodeModuleDefinition(import_chunk_JORHPTV5.MODULE_NAME, [import_chunk_JORHPTV5.VERSION]);
    return [module2];
  }
  enable() {
    const config = this._config;
    const globalValue = {
      helper: new import_chunk_J2R3KSH3.ActiveTracingHelper({
        traceMiddleware: config.middleware ?? false,
        tracerProvider: this.tracerProvider ?? import_api.trace.getTracerProvider(),
        ignoreSpanTypes: config.ignoreSpanTypes ?? []
      })
    };
    global[import_chunk_JORHPTV5.GLOBAL_INSTRUMENTATION_ACCESSOR_KEY] = globalValue;
    global[import_chunk_JORHPTV5.GLOBAL_VERSIONED_INSTRUMENTATION_ACCESSOR_KEY] = globalValue;
  }
  disable() {
    delete global[import_chunk_JORHPTV5.GLOBAL_INSTRUMENTATION_ACCESSOR_KEY];
    delete global[import_chunk_JORHPTV5.GLOBAL_VERSIONED_INSTRUMENTATION_ACCESSOR_KEY];
  }
  isEnabled() {
    return Boolean(global[import_chunk_JORHPTV5.GLOBAL_VERSIONED_INSTRUMENTATION_ACCESSOR_KEY]);
  }
};
